<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->


<upgrade xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <target>2.2.*.*</target>

  <order>
    <group name="ZOOKEEPER" title="Zookeeper">
      <service name="ZOOKEEPER">
        <component>ZOOKEEPER_SERVER</component>
        <component>ZOOKEEPER_CLIENT</component>
      </service>
    </group>

    <group name="CORE_MASTER" title="Core Masters">
      <service name="HDFS">
        <component>JOURNALNODE</component>
        <component>NAMENODE</component>
      </service>

      <service name="MAPREDUCE2">
        <component>HISTORYSERVER</component>
      </service>

      <service name="YARN">
        <component>APP_TIMELINE_SERVER</component>
        <component>RESOURCEMANAGER</component>
      </service>

      <service name="HBASE">
        <component>HBASE_MASTER</component>
      </service>
    </group>

    <group name="CORE_SLAVES" title="Core Slaves" xsi:type="colocated">
      <service name="HDFS">
        <component>DATANODE</component>
      </service>
      
      <service name="HBASE">
        <component>HBASE_REGIONSERVER</component>
      </service>

     <service name="YARN">
        <component>NODEMANAGER</component>
      </service>

      <batch>
        <percent>33</percent>
        <message>Please run additional tests</message>
      </batch>
    </group>

    <group name="HIVE" title="Hive">
      <skippable>true</skippable>
      <service name="HIVE">
        <component>HIVE_METASTORE</component>
        <component>HIVE_SERVER</component>
        <component>WEBHCAT_SERVER</component>
      </service>
    </group>

    <group name="FALCON" title="Falcon">
      <skippable>true</skippable>
      <service name="FALCON">
        <component>FALCON_SERVER</component>
        <component>FALCON_CLIENT</component>
      </service>
    </group>

    <group name="KAFKA" title="Kafka">
      <service name="KAFKA">
        <component>KAFKA_BROKER</component>
      </service>
   </group>

    <group name="CLIENTS" title="Client Components">
      <service name="HDFS">
        <component>HDFS_CLIENT</component>
      </service>

      <service name="YARN">
        <component>YARN_CLIENT</component>
      </service>

      <service name="MAPREDUCE2">
        <component>MAPREDUCE2_CLIENT</component>
       </service>

       <service name="TEZ">
         <component>TEZ_CLIENT</component>
       </service>

       <service name="HBASE">
         <component>HBASE_CLIENT</component>
       </service>

       <service name="PIG">
         <component name="PIG" />
       </service>

       <service name="HIVE">
         <component>HIVE_CLIENT</component>
         <component>HCAT</component>
       </service>
    </group>

    <group xsi:type="cluster" name="POST_CLUSTER" title="Finalize Upgrade">
      <execute-stage title="Confirm Finalize">
        <task xsi:type="manual">
          <message>Please confirm you are ready to finalize</message>
        </task>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Execute HDFS Finalize">
        <task xsi:type="execute" hosts="master">
          <script>scripts/namenode.py</script>
          <function>finalize_rolling_upgrade</function>
        </task>
      </execute-stage>
      <execute-stage title="Save Cluster State" service="" component="">
        <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.FinalizeUpgradeAction">
        </task>
      </execute-stage>
    </group>
  </order>

  <processing>
    <service name="ZOOKEEPER">
      <component name="ZOOKEEPER_SERVER">
        <!-- TODO, optimization
        <pre-upgrade>
          Find the leader by running
          echo stat | nc localhost 2181
          on the ZK nodes until one of them replies with a value (standalone or replicated).
          Store that leader, and perform the upgrade on the leader last, this is only an optimization and is optional.
        </pre-upgrade>
        -->

        <!-- ZK Server Restart (or Start, implicitly) must do the following:
        Before continuing to the next ZK host, make sure that a quorum is established.
        Start the shell, /usr/hdp/current/zookeeper-client/bin/zkCli.sh
        Then run,
        $ create /zk_test mydata
        $ ls /
        [hiveserver2, zookeeper, zk_test]

        Finally, delete it,
        $ delete /zk_test

        $ quit
        -->
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

    <service name="HDFS">
      <component name="NAMENODE">
        <pre-upgrade>
          <task xsi:type="execute" hosts="master">
            <script>scripts/namenode.py</script>
            <function>prepare_rolling_upgrade</function>
          </task>
        </pre-upgrade>

        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="DATANODE">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
      
      <component name="HDFS_CLIENT">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="JOURNALNODE">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

    <service name="MAPREDUCE2">
      <component name="HISTORYSERVER">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
      
      <component name="MAPREDUCE2_CLIENT">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

    <service name="YARN">
      <component name="APP_TIMELINE_SERVER">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="RESOURCEMANAGER">
        <!--
        Upgrade+restart the standby ResourceManager first
        Make the standby ResourceManager as the active

        Automatic failover: This can be done by simply killing the current active ResourceManager
        Manual failover: Make the standby ResourceManager as the active and the current active as standby
        -->
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="NODEMANAGER">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="YARN_CLIENT">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>
    
    <service name="HBASE">
      <component name="HBASE_MASTER">
        <pre-upgrade>
          <task xsi:type="execute" hosts="master">
            <command>su - {{hbase-env/hbase_user}} -c 'echo "snapshot_all" | hbase shell'</command>
          </task>
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="HBASE_REGIONSERVER">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
      
      <component name="HBASE_CLIENT">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

    <service name="TEZ">
      <component name="TEZ_CLIENT">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>
    
    <service name="PIG">
      <component name="PIG">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

    <service name="HIVE">
      <component name="HIVE_METASTORE">
        <pre-upgrade>
          <task xsi:type="manual">
            <message>Backup the Hive Metastore database.</message>
          </task>
          <task xsi:type="manual">
            <message>Run the SQL file at /usr/hdp/$version/hive/scripts/metastore/upgrade to update the Hive Metastore schema.</message>
          </task>
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="HIVE_SERVER">
        <pre-upgrade>
          <task xsi:type="manual">
            <message>The HiveServer port will now change to 10010. Ensure that this port is available on each HiveServer instance.</message>
          </task>

          <task xsi:type="configure">
            <type>hive-site</type>
            <key>hive.server2.thrift.port</key>
            <value>10010</value>
          </task>
        </pre-upgrade>
        
        <pre-downgrade>
          <task xsi:type="manual">
            <message>The HiveServer port will now change to 10000. Ensure that this port is available on each HiveServer instance.</message>
          </task>

          <task xsi:type="configure">
            <type>hive-site</type>
            <key>hive.server2.thrift.port</key>
            <value>10000</value>
          </task>
        </pre-downgrade>

        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="WEBHCAT_SERVER">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>

      <component name="HIVE_CLIENT">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

    <service name="FALCON">
      <component name="FALCON_SERVER">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
      <component name="FALCON_CLIENT">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

    <service name="KAFKA">
      <component name="KAFKA_BROKER">
        <upgrade>
          <task xsi:type="restart" />
        </upgrade>
      </component>
    </service>

  </processing>
</upgrade>
